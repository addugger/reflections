Q:	What happens when you initialize a repository? Why do you need
	to do it?
A:	It creates the .git directory and intilizes some values and
	configurations inside it.  This is where git will store files
	as they initially appear in the repository as well as modifcations
	for those files over time (commits).

Q:	How is the staging area different from the working directory and
	the repository? What value do you think it offers?
A:	The working directory is the actual directory where the files are
	located on your filesystem, while the staging directory is more
	of a logical location via status for each file in your working
	directory.  This allows each commit to contain only the adds/
	modifications you want.

Q:	How can you use the staging area to make sure you have one commit
	per logical change?
A:	Check the diff between the staging area and the previous commit
	to make sure all the changes fit in one logical update.

Q:	What are some situations when branches would be helpful in
	keeping your history organized? How would branches help?
A:	When trying out a new concept or fixing a bug.  I can freely
	modify the files in the non-master branch without worrying
	about the true program breaking.  This is especially useful
	for "live" code that you can't risk breaking because end
	users would be affected.

Q:	How do the diagrams help you visualize the branch structure?
A:	Git structures are just graphs with some rules, so drawing
	out the logical graph with knowledge of those rules can help
	you see what has access to what via the idea of "parents"
	because the structure is very tree-like...but maybe not quite
	a tree because of merges.

Q:	What is the result of merging two branches together? Why do
	we represent it in the diagram the way we do?
A:	After merging two branches, the new tip has access to all
	changes for each branch.  Keeping the lines separate in
	the diagram helps keep it visually clear which commits
	came from which branch and also helps visualize the
	parents of each commit.

Q:	What are the pros and cons of Gitâ€™s automatic merging vs.
	always doing merges manually?
A:	Even if we had to do all merges manually, we'd have to
	diff every file that has changed in both branches and
	check for conflicts, then resolve conflicts.  Taking
	out the conflict searching just makes things more
	efficient.